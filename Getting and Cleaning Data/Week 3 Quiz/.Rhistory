above <- function(x, n){
use <- x < n
x[use]
}
x <- 1:20
above(x, 12)
above <- function(x, n){
use <- x > n
x[use]
}
above(x, 12)
columnmean <- function(y) {
nc <- ncol(y)
# initialize a vector to hold the means
# the length is same as number of columns
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
# initialize a vector to hold the means
# the length is same as number of columns
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(airquality, TRUE)
?strptime
swirl()
library(swirl())
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
int
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
library(swirl)
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
my_rpois <- replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?mtcars
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data(mtcars)
dim(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
library(swirl)
swirl()
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
install_from_swirl("Getting and Cleaning Data")
swirl()
path2csv
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
mydf
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(r_arch:country)
select(cran r_arch:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
play()
csv.write(cran, "cran.csv")
write.csv(cran, "cran.csv")
nxt()
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country ++ "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, and size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
# setwd("~/Google Drive/_Data Science Johns Hopkins/R Programming/wk4_pgm_hospital_care/rprog_data_ProgAssignment3-data")
rankhospital <- function(state, outcome, num = "best") {
## state: two-character abbreviated name of a state
## outcome: name of outcome "heart attack", "heart failure",
## "pneumonia"
## num: the rank of the hospital in the specified state
## Return: returns the name of the hospital with the num-lowest
## 30-day death rate for the outcome
## returns NA if num is greater than max number of hospitals for which data
## is available
## load libraries
library(dplyr)
library(tidyr)
## assign column number based on outcome value
## return error message if outcome is invalid
if (outcome == "heart attack") {
c.num <- 11
}
else if (outcome == "heart failure") {
c.num <- 17
}
else if (outcome == "pneumonia") {
c.num <- 23
}
else {
return("Invalid outcome. Please specify heart attack, heart failure, or pneumonia.")
}
## read and sort data by 1) state 2) rate 3) hospital name
df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- tbl_df(df)
## coerce 30-day mortality column for given outcome to numeric
data[ ,c.num] <- as.numeric(data[ ,c.num])
## sort by  1) state 2) 30-day death rate for specified outcome 3) hospital name
data <- data[order(data$State, data[c.num], data$Hospital.Name), ]
## check if state is valid and return error message if not
if(!is.element(state, data$State)){
return("Invalid state. Please provide the two-character abbreviation for the state.")
}
## select rows for given state
d <- data[,c.num][data$State==state]
if(num == "best") {
## return hospital name with the lowest 30-day
## mortality rate in the specified state
m <- min(na.omit(d))
out <- filter(data, State == state, data[,c.num] == m)
return(out$Hospital.Name[1])
}
else if(num == "worst") {
## return hospital name with the highest 30-day
## mortality rate in the specified state
m <- max(na.omit(d))
out <- filter(data, State == state, data[,c.num] == m)
return(out$Hospital.Name[1])
}
else if(num > length(filter(data, State == state))) {
return(NA)
}
else {
m <- na.omit(d)
out <- filter(data, State == state)
return(out$Hospital.Name[num])
}
}
setwd("~/Google Drive/_Data Science Johns Hopkins/R Programming/wk4_pgm_hospital_care/rprog_data_ProgAssignment3-data")
getwd()
setwd("~/Google Drive/_Data Science Johns Hopkins/R Programming/wk4_pgm_hospital_care/rprog_data_ProgAssignment3-data")
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
month(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
dt1 <- ymd_hms("2014-08-23 17:23:02")
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 11, minutes = 11, seconds = 45)
this_moment
?now
## Now, pretend you are in New York City and you are planning to visit a friend in
## Hong Kong. You seem to have misplaced your itinerary, but you know that your
## flight departs New York at 17:34 (5:34pm) the day after tomorrow. You also know
## that your flight is scheduled to arrive in Hong Kong exactly 15 hours and 50
## minutes after departure.
## Let's reconstruct your itinerary from what you can remember, starting with the
## full date and time of your departure. We will approach this by finding the
## current date in New York, adding 2 full days, then setting the time to 17:34.
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
## Your friend wants to know what time she should pick you up from the airport in
## Hong Kong. Now that we have the exact date and time of your departure from New
## York, we can figure out the exact time of your arrival in Hong Kong.
## The first step is to add 15 hours and 50 minutes to your departure time. Recall
## that nyc + days(2) added two days to the current time in New York. Use the same
## approach to add 15 hours and 50 minutes to the date-time stored in depart. Store
## the result in a new variable called arrive.
arrive <- depart + hours(15) + minutes(50)
?with_tz
## The arrive variable contains the time that it will be in New York when you
## arrive in Hong Kong. What we really want to know is what time it will be in Hong
## Kong when you arrive, so that your friend knows when to meet you.
## Use with_tz() to convert arrive to the "Asia/Hong_Kong" time zone.
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
## Fast forward to your arrival in Hong Kong. You and your friend have just met at
## the airport and you realize that the last time you were together was in
## Singapore on June 17, 2008. Naturally, you'd like to know exactly how long it
## has been.
last_time <- mdy("june 17, 2008", tz = "Singapore")
## Fast forward to your arrival in Hong Kong. You and your friend have just met at
## the airport and you realize that the last time you were together was in
## Singapore on June 17, 2008. Naturally, you'd like to know exactly how long it
## has been.
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive, tzone = tz(last_time))
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
0
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion(dplyr)
packageVersion("dplyr"
)
cran <- tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time())
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, package <= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), desc(ip_id))
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(packsum$unique, probs = 0.99)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit(0)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
setwd("~/Google Drive/_Data Science Johns Hopkins/Getting and Cleaning Data/wk3_quiz")
# download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "img.jpeg")
image <- readJPEG("img.jpeg", native = TRUE)
quantile(image, probs = c(0.3, 0.8))
gdp <- read.csv("gdp.csv", skip = 5, nrows = 215, header = FALSE)
head(gdp) ## V1 is country shortcode
tail(gdp)
edu <- read.csv("edu.csv")
head(edu) ## CountryCode is country shortcode
library(dplyr)
gdp <- gdp %>%
rename(CountryCode = V1, Ranking = V2, Economy = V4, MillionsOfUSDollars = V5) %>%
select(CountryCode, Ranking, Economy, MillionsOfUSDollars) %>%
print
mergedData <- merge(gdp, edu, by.x = "CountryCode", by.y = "CountryCode")
head(mergedData)
mergedData <- arrange(mergedData, desc(Ranking))
head(mergedData, 13)
dim(mergedData)
tail(mergedData, 22) ## USA is ranked 1 and at spot 189
mergedData <- filter(mergedData, !is.na(CountryCode))
dim(mergedData)
tail(mergedData, 22)
mergedData <- filter(mergedData, !is.na(Ranking))
dim(mergedData)
### Number 4
## What is the average GDP ranking for the "High income: OECD"
## and "High income: nonOECD" group?
mergedData <- group_by(mergedData, "Income Group")
summarize(mergedData, mean(Ranking))
mergedData
### Number 4
## What is the average GDP ranking for the "High income: OECD"
## and "High income: nonOECD" group?
mergedData <- group_by(mergedData, Income.Group)
mergedData
summarize(mergedData, mean(Ranking))
### Number 5
## Cut the GDP ranking into 5 separate quantile groups.
## Make a table versus Income.Group. How many countries
## are Lower middle income but among the 38 nations with
## highest GDP?
quant <- quantile(mergedData$Ranking)
mergedData <- cut(mergedData, quant, incude.lowest = TRUE)
mergedData <- cut(mergedData$Ranking, quant, incude.lowest = TRUE)
mergedData
mergedData <- merge(gdp, edu, by.x = "CountryCode", by.y = "CountryCode")
head(mergedData)
mergedData <- arrange(mergedData, desc(Ranking))
head(mergedData, 13)
dim(mergedData)
tail(mergedData, 22) ## USA is ranked 1 and at spot 189
mergedData <- filter(mergedData, !is.na(Ranking))
dim(mergedData)
### Number 4
## What is the average GDP ranking for the "High income: OECD"
## and "High income: nonOECD" group?
mergedData <- group_by(mergedData, Income.Group)
mergedData
summarize(mergedData, mean(Ranking))
### Number 5
## Cut the GDP ranking into 5 separate quantile groups.
## Make a table versus Income.Group. How many countries
## are Lower middle income but among the 38 nations with
## highest GDP?
quant <- quantile(mergedData$Ranking)
### Number 5
## Cut the GDP ranking into 5 separate quantile groups.
## Make a table versus Income.Group. How many countries
## are Lower middle income but among the 38 nations with
## highest GDP?
quant <- quantile(mergedData$Ranking)
quantRank <- cut(mergedData$Ranking, quant, incude.lowest = TRUE)
mergedData <- mutate(Quant.Rank = quantRank)
mergedData <- mutate(qRank = quantRank)
mergedData <- mutate(mergedData, Rank.Quant = quantRank)
mergedData
### Number 5
## Cut the GDP ranking into 5 separate quantile groups.
## Make a table versus Income.Group. How many countries
## are Lower middle income but among the 38 nations with
## highest GDP?
ungroup(mergedData)
quant <- quantile(mergedData$Ranking)
quantRank <- cut(mergedData$Ranking, quant, incude.lowest = TRUE)
mergedData <- mutate(mergedData, Rank.Quant = quantRank)
### Number 5
## Cut the GDP ranking into 5 separate quantile groups.
## Make a table versus Income.Group. How many countries
## are Lower middle income but among the 38 nations with
## highest GDP?
mergedData <- ungroup(mergedData)
quant <- quantile(mergedData$Ranking)
quantRank <- cut(mergedData$Ranking, quant, incude.lowest = TRUE)
mergedData <- mutate(mergedData, Rank.Quant = quantRank)
table(mergedData$Income.Group, mergedData$Rank.Quant)
quant <- quantile(mergedData$Ranking, probs = c(0.2, 0.4, 0.6, 0.8, 1))
quantRank <- cut(mergedData$Ranking, quant, incude.lowest = TRUE)
mergedData <- mutate(mergedData, Rank.Quant = quantRank)
table(mergedData$Income.Group, mergedData$Rank.Quant)
quant <- quantile(mergedData$Ranking, probs = c(0, 0.2, 0.4, 0.6, 0.8))
quantRank <- cut(mergedData$Ranking, quant, incude.lowest = TRUE)
mergedData <- mutate(mergedData, Rank.Quant = quantRank)
table(mergedData$Income.Group, mergedData$Rank.Quant)
quant <- quantile(mergedData$Ranking, probs = c(0, 0.2, 0.4, 0.6, 0.8, 1))
quantRank <- cut(mergedData$Ranking, quant, incude.lowest = TRUE)
mergedData <- mutate(mergedData, Rank.Quant = quantRank)
table(mergedData$Income.Group, mergedData$Rank.Quant)
