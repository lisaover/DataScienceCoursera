library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("HSAUR", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(readxl)
CH08Q02 <- read_excel("~/Google Drive/Independent Study/BOOK Applied Regression Analysis/datasets/EXCEL/CH08/CH08Q02.xls")
View(CH08Q02)
library(tigris)
load(tigris)
load(tigris)install.packages("tigris")
install.packages("tigris")
install.packages("tigris")
setRepositories()
ap <- available.packages()
ap
install.packages("installr")
library(installr)
updateR()
setRepositories()
install.packages("installr")
library(installr)
updateR()
setRepositories()
install.packages("installr")
install.packages("installr")
install.packages(KernSmooth)
install.packages('KernSmooth')
library(KernSmooth)
install.packages("tmap")
install.packages("tmap", dependencies = TRUE)
install.packages("tmaptools" dependencies=TRUE)
install.packages("tmaptools", dependencies = TRUE)
library(tmap)
library("tmap")
install.packages("tmaptools")
library("tmap")
install.packages("shiny")
library("shiny")
library("tmap")
install.packages("tmap")
library("tmap")
install.packages("units", type='binary')
install.packages("units")
install.packages("units", dependencies = TRUE)
install.packages("udunits", dependencies = TRUE)
install.packages("shiny")
install.packages("tmap")
library("shiny")
library("tmap")
install.packages("udunits")
install.packages("units")
install.packages("tmap", dependencies = TRUE)
library("tmap")
install.packages("forecast",
repos = c("http://rstudio.org/_packages",
"http://cran.rstudio.com"))
install.packages("package's name", repos=c("http://rstudio.org/_packages", "http://cran.rstudio.com"))
install.packages("colorspace", dependencies = TRUE)
library("colorspace")
install.packages("tmap")
install.packages("units")
install.packages("udunits")
ap <- available.packages()
view(ap)
ap
install.packages("units", dependencies=TRUE, repos='http://cran.rstudio.com/')
swirl()
library(swirl)
swirl()
x
x[1:10]
x[is.na()]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11,bar=2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<-c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vecotr)
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data)
colnames(my_data) <- cnames
my_data
add2 <- function(x, y) {
x + y
}
add2(3, 5)
above10 <- funtion(x) {
use <- x > 10
x[use]
}
above10 <- funtion(x) {
use <- x > 10
x[use]
}
above10 <- function(x) {
use <- x > 10
x[use]
}
above <- function(x, n){
use <- x < n
x[use]
}
x <- 1:20
above(x, 12)
above <- function(x, n){
use <- x > n
x[use]
}
above(x, 12)
columnmean <- function(y) {
nc <- ncol(y)
# initialize a vector to hold the means
# the length is same as number of columns
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
# initialize a vector to hold the means
# the length is same as number of columns
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(airquality, TRUE)
?strptime
swirl()
library(swirl())
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints <- sample(10)
int
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
library(swirl)
swirl()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
?rpois
rpois(5, 10)
my_rpois <- replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?mtcars
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data(mtcars)
dim(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
library(swirl)
swirl()
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
install_from_swirl("Getting and Cleaning Data")
swirl()
path2csv
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
mydf
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(r_arch:country)
select(cran r_arch:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
play()
csv.write(cran, "cran.csv")
write.csv(cran, "cran.csv")
nxt()
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country ++ "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, and size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
# setwd("~/Google Drive/_Data Science Johns Hopkins/R Programming/wk4_pgm_hospital_care/rprog_data_ProgAssignment3-data")
rankhospital <- function(state, outcome, num = "best") {
## state: two-character abbreviated name of a state
## outcome: name of outcome "heart attack", "heart failure",
## "pneumonia"
## num: the rank of the hospital in the specified state
## Return: returns the name of the hospital with the num-lowest
## 30-day death rate for the outcome
## returns NA if num is greater than max number of hospitals for which data
## is available
## load libraries
library(dplyr)
library(tidyr)
## assign column number based on outcome value
## return error message if outcome is invalid
if (outcome == "heart attack") {
c.num <- 11
}
else if (outcome == "heart failure") {
c.num <- 17
}
else if (outcome == "pneumonia") {
c.num <- 23
}
else {
return("Invalid outcome. Please specify heart attack, heart failure, or pneumonia.")
}
## read and sort data by 1) state 2) rate 3) hospital name
df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- tbl_df(df)
## coerce 30-day mortality column for given outcome to numeric
data[ ,c.num] <- as.numeric(data[ ,c.num])
## sort by  1) state 2) 30-day death rate for specified outcome 3) hospital name
data <- data[order(data$State, data[c.num], data$Hospital.Name), ]
## check if state is valid and return error message if not
if(!is.element(state, data$State)){
return("Invalid state. Please provide the two-character abbreviation for the state.")
}
## select rows for given state
d <- data[,c.num][data$State==state]
if(num == "best") {
## return hospital name with the lowest 30-day
## mortality rate in the specified state
m <- min(na.omit(d))
out <- filter(data, State == state, data[,c.num] == m)
return(out$Hospital.Name[1])
}
else if(num == "worst") {
## return hospital name with the highest 30-day
## mortality rate in the specified state
m <- max(na.omit(d))
out <- filter(data, State == state, data[,c.num] == m)
return(out$Hospital.Name[1])
}
else if(num > length(filter(data, State == state))) {
return(NA)
}
else {
m <- na.omit(d)
out <- filter(data, State == state)
return(out$Hospital.Name[num])
}
}
setwd("~/Google Drive/_Data Science Johns Hopkins/R Programming/wk4_pgm_hospital_care/rprog_data_ProgAssignment3-data")
getwd()
setwd("~/Google Drive/_Data Science Johns Hopkins/R Programming/wk4_pgm_hospital_care/rprog_data_ProgAssignment3-data")
setwd("~/Google Drive/_Data Science Johns Hopkins/Getting and Cleaning Data/")
setwd("~/Google Drive/_Data Science Johns Hopkins/Getting and Cleaning Data/wk1_quiz")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FPUMSDataDict06.pdf")
?download.file
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FPUMSDataDict06.pdf", ACS_Idaho_Code_book.pdf)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FPUMSDataDict06.pdf", "ACS_Idaho_Code_book.pdf")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "ACS_Idaho_Microdata.csv")
idaho <- read.csv("ACS_Idaho_Microdata.csv")
idaho
library(dplyr)
library(tidyr)
library(readr)
df <- read.csv("ACS_Idaho_Microdata.csv")
idaho <- tbl_df(df)
idaho
million <- filter(idaho, VAL >= 1000000)
million
value <- select(idaho, VAL)
value
million <- filter(idaho, VAL == 24)
million
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "ngap.xlsx")
?read.xlsx
??read.xlsx
# download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "ngap.xlsx")
ngap <- read.xlsx("ngap.xlsx", range = "G18:O23")
install.packages("readxl")
library(readxl)
# download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "ngap.xlsx")
ngap <- read.xlsx("ngap.xlsx", range = "G18:O23")
# download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "ngap.xlsx")
ngap <- read_excel("ngap.xlsx", range = "G18:O23")
ngap <- read.xlsx("ngap.xlsx", range = "G18:O23")
# download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "ngap.xlsx")
dat <- read_excel("ngap.xlsx", range = "G18:O23")
# download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "ngap.xlsx")
df <- read_excel("ngap.xlsx", range = "G18:O23")
dat <- tbl_df(df)
dat <- read_excel("ngap.xlsx", range = "G18:O23")
# download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx", "ngap.xlsx")
df <- read_excel("ngap.xlsx", range = "G18:O23")
dat <- tbl_df(df)
dat
sum(dat$Zip*dat$Ext,na.rm=T)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", "balt.xml")
install.packages("XML")
library(XML)
?readHTMLList
?xmlParse
# download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", "balt.xml")
balt <- xmlParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
# download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", "balt.xml")
balt <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal = TRUE)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv", "Idaho_2006.csv")
DT <- fread("Idaho_2006.csv")
install.packages(data.table)
install.packages("data.table")
library(data.table)
DT <- fread("Idaho_2006.csv")
DT
sys.time(mean(DT$pwgtp15,by=DT$SEX))
sys.time()
library(tictoc)
install.packages("tictoc")
library(tictoc)
sys.time()
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time({rowMeans(DT)[DT$SEX==1] rowMeans(DT)[DT$SEX==2]})
system.time({mean(DT[DT$SEX==1,]$pwgtp15) mean(DT[DT$SEX==2,]$pwgtp15)})
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time({rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]})
system.time({mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)})
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
fname <- "restaurants.xml"
download_if_not_exists(fname, "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml")
# download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", "balt.xml")
balt <- xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternal = TRUE)
# download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", "balt.xml")
balt <- xmlTreeParse("http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml", useInternalNodes = TRUE)
rows <- getNodeSet(balt, "//row[zipcode=21231]")
rows
z <- xmlToDataFrame(nodes = rows)
z
nrow(z)
